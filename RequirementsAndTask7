7. Модель движения на круговой автомобильной развязке

    Рассматривается круговая дорога, соединяющая несколько (от трех до пяти) прямых автомобильных дорог и служащая для поворота автомобилей
c одной прямой дороги на другую. Круговая дорога содержит две полосы (ряда), по которым автомобили двигаются в одном
направлении (против часовой стрелки); а по входящим в круг дорогам допускается обычное двунаправленное движение, причем каждому
направлению соответствует своя полоса дороги. Требуется разработать компьютерную модель автомобильного движения на круговой развязке.
Цель моделирования – исследование характера возникающих на ней заторов в зависимости от плотностей потоков автомобилей и их скоростей
на каждой из входящих в развязку дорог. Автомобили должны появляться на концах каждой из прямых дорог случайным образом, для этого интервал
между последовательным появлением на дороге двух машин определяется как случайная величина. Для каждого нового автомобиля задается его
начальная скорость, которая также является случайной величиной из некоторого диапазона (например, от 30 до 120 км/час). Случайным образом
определяется и дорога, на которую нужно свернуть автомобилю при проезде через круговую развязку. Автомобили стараются по возможности
сохранить свою начальную скорость, но при необходимости они притормаживают и/или останавливаются перед другими автомобилями. Например,
если автомобиль приближается к идущей впереди него машине на некоторое фиксированное расстояние (5-10 м), он начинает притормаживать,
пока его скорость не сравняется со скоростью передней машины.
    Когда автомобиль достигает развязки, он въезжает на круг и проезжает по нему до той дороги, на которую ему необходимо свернуть. Въезжать на
круговую дорогу, двигаться по ней (перестраиваясь из одного ряда в другой), и выезжать с нее на нужную дорогу автомобили должны в соответствии с
правилами дорожного движения. После выезда на нужную дорогу автомобиль проезжает по ней до конца и исчезает.
    Кроме правил въезда/выезда и смены полос, в программе должны быть зафиксированы законы торможения и ускорения автомобилей, которые в общем
случае зависят от допустимого сближения между автомобилями, дистанции видимости, видов автомобилей (например, легковых и грузовых).
В параметры моделирования необходимо включить диапазон возможных скоростей автомобилей и интервал между их появлениями на дороге (отдельно
для каждой дороги, входящей в развязку, от этого зависит плотность потока автомашин на ней). Как параметр можно задавать и приоритет
дорог развязки.
    Визуальная картина движения на круговой развязке должна включать изображения всех дорог и движущихся машин. Следует учесть, что изображения
самих автомобилей необходимо сделать крупнее, чем это определяется масштабом, иначе они будут плохо видны. Полезно использовать разные цвета
для изображения различных состояний автомобиля (ускорение, торможение, остановка, поворот).


Отчет о выполнении задания практикума
Текст отчета должен включать следующие разделы:
1. Уточнение постановки задачи для выбранного варианта задания, при
необходимости – описание математической модели процесса или явления.
 Например: Демонстрационная модель солнечной системы.
Смоделировать на основе законов Кеплера движение планет Солнечной
системы и пролет кометы через нее с заданной скоростью.
2. Диаграмма классов, показывающая выделенные классы и связи между ними.
Например:
SolarSystem CelestialBody
Sun Planet Comet
Satellite SolarPlanet
Наследование
Агрегация
Использование
1 n
3. Текстовые спецификации интерфейса основных классов системы.
Например, для одного из классов:
//Интерфейс класса, представляющего Солнечную систему
class CSolarSystem
{ public:
47
//итераторы для объектов системы
typedef TBodies::iterator TIterator;
TIterator begin();
TIterator end();
//конструктор и деструктор
CSolarSystem(void);
~CSolarSystem(void);
//пересчет положения объектов системы
void nextFrame(double days_per_frame);
//добавление тела p в систему
void addBody(CCelestialBody * p);
//удаление тела p из системы
void removeBody(CCelestialBody * p);
};
4. Диаграмма объектов, показывающая основные объекты и их связи.
Например, для модели Солнечной системы (для наглядности на стрелках не
указываются названия вызываемых методов):
solar
mercury
venus
earth
mars
jupiter
saturn
uranus
neptune
sun
moon
phobos
deimos
europa
ganymede
titan
...
comet
5. Инструментальные средства, использованные при выполнении задания: язык
программирования, интегрированная среда, библиотеки.
Например: Язык разработки – С++
Среда разработки – Microsoft Visual Studio .NET 2003
Используемые библиотеки – OpenGL, glut.
6. Описание файловой структуры системы: перечень всех файлов программы с
указанием классов, описанных в каждом из них.
Например:
solar.cpp – главный файл, интерфейс;
48
Planets.h и Planets.cpp – объявление и описание классов CPlanets,
CSolarPlanet и CSatellite;
Comet.h и Comet.cpp – объявление и описание класса CComet;
Sun.h – описание класса CSun;
CelestialBody.h – объявление класса CCelestialBody;
CelestialBody.cpp – описание класса CCelestialBody;
SolarSystem.h – объявление класса CSolarSystem;
SolarSystem.cpp – описание класса CSolarSystem.
7. Пользовательский интерфейс: вид диалоговых окон для ввода параметров
моделирования и для визуализации моделируемого процесса или явления;
описание функций основных элементов управления этих окон.
Например: клавиши управления визуализацией Солнечной системы:
W – увеличение масштаба изображения;
S – уменьшение масштаба изображения;
A – движение налево, D – движение направо области просмотра;
Мышью при зажатой левой кнопке – повороты тел;
+ и - – увеличение и уменьшение скорости движения тел;
O – отображение/скрытие орбит;
N – отображение/скрытие названий тел Солнечной системы;
1..9 – инициирует пролет кометы со скоростью от 1 до 9 скоростей
 Земли в точке восхождения;
Е – выход из системы.
